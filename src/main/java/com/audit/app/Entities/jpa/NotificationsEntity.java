/*
 * Created on 13 Jul 2017 ( Time 13:22:23 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.audit.app.Entities.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "notifications"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="notifications", catalog="chat_data" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="NotificationsEntity.countAll", query="SELECT COUNT(x) FROM NotificationsEntity x" )
} )
public class NotificationsEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="notification", length=245)
    private String     notification ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created_date")
    private Date       createdDate  ;

	// "deptId" (column "dept_id") is not defined by itself because used as FK in a link 
	// "locId" (column "loc_id") is not defined by itself because used as FK in a link 
	// "userId" (column "user_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="user_id", referencedColumnName="id")
    private UsersEntity users       ;

    @ManyToOne
    @JoinColumn(name="dept_id", referencedColumnName="id")
    private DepartmentsEntity departments ;

    @ManyToOne
    @JoinColumn(name="loc_id", referencedColumnName="id")
    private LocationsEntity locations   ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public NotificationsEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : notification ( VARCHAR ) 
    public void setNotification( String notification ) {
        this.notification = notification;
    }
    public String getNotification() {
        return this.notification;
    }

    //--- DATABASE MAPPING : created_date ( DATETIME ) 
    public void setCreatedDate( Date createdDate ) {
        this.createdDate = createdDate;
    }
    public Date getCreatedDate() {
        return this.createdDate;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setUsers( UsersEntity users ) {
        this.users = users;
    }
    public UsersEntity getUsers() {
        return this.users;
    }

    public void setDepartments( DepartmentsEntity departments ) {
        this.departments = departments;
    }
    public DepartmentsEntity getDepartments() {
        return this.departments;
    }

    public void setLocations( LocationsEntity locations ) {
        this.locations = locations;
    }
    public LocationsEntity getLocations() {
        return this.locations;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(notification);
        sb.append("|");
        sb.append(createdDate);
        return sb.toString(); 
    } 

}
